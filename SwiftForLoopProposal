UNDER CONSTRUCTION

# Additional For-Loop syntax

* Proposal: [SE-NNNN](https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-name.md)
* Author(s): Ted van Gaalen
* Status: **Awaiting review**
* Review manager: TBD

## Introduction

There is a proposal to remove the classical (C-Style) for-loop  e.g.
   for var i= 0; i < 10;i++) 
from the Swift language. 
This imposes a severe limitation, because currently only the for-in loop,
which always iterates through a collection is available. 

## Motivation

In technical and scientific programming, one often encounters loops
based on iterating and changing numerical values (e.g. floats, integers, doubles)
varying values from positive to negative or reversed with arbitrary
step sizes which also could be positive and negative, and 
not bound to or based on collections or arrays.. 
For example:

 

        let w:Float = 20
        let h:Float = 5
        let l:Float = 5
        
        for var x:Float = -60;    x < 60;    x += w * 1.2
        {
            for var y:Float = -30;    y < 60;    y += h * 1.2
            {
               let pos = SCNVector3(x: x,   y: y,   z: z)
                
                let tile = TGStaticTile(pos: pos,
                                w:  CGFloat(w), h: CGFloat(h), l: CGFloat(l),
                                color: UIColor.randomColor(), naam: "Tile\(tiles.count + 1)")

                tiles.append(tile)
           }
        }
    
When the classical for ;; is no longer available 
one either needs to fall back on using do-while control statements
or use the  for... in... method like so:

let w = 20.0
let h = 5.0
    
for var x in (-60.0).stride(to: 60.0, by:  w * 1.2)
{
    for var y in (30.0).stride(to: -60.0, by:  -h * 1.2)
    {
        print("x = \(x)    y = \(y)")
    }
}





    
    
    
## Proposed solution

Describe your solution to the problem. Provide examples and describe
how they work. Show how your solution is better than current
workarounds: is it cleaner, safer, or more efficient?

## Detailed design

Describe the design of the solution in detail. If it involves new
syntax in the language, show the additions and changes to the Swift
grammar. If it's a new API, show the full API and its documentation
comments detailing what it does. The detail in this section should be
sufficient for someone who is *not* one of the authors to be able to
reasonably implement the feature.

## Impact on existing code

Describe the impact that this change will have on existing code. Will some
Swift applications stop compiling due to this change? Will applications still
compile but produce different behavior than they used to? Is it
possible to migrate existing Swift code to use a new feature or API
automatically?

## Alternatives considered

Describe alternative approaches to addressing the same problem, and
why you chose this approach instead.
